package easy;

public class RemovePalindromicSubsequence {

    /*
    You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

    Return the minimum number of steps to make the given string empty.

    A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

    A string is called palindrome if is one that reads the same backward as well as forward.
     */

    public static void main(String[] args) {
        System.out.println(removePalindromeSub("abababa"));
    }

    public static int removePalindromeSub(String s) {
        //brainteaser/trick
        //if string is palindrome all chars can be removed in 1 steps
        //if not 2 steps max: 1 step to remove all 'a' + 1 step to remove all 'b'
        if (isPalindrome(s)) return 1;
        else return 2;
    }

    static boolean isPalindrome (String s) {
        for (int i=0;i<s.length()/2;i++) {
            if (s.charAt(i)!=s.charAt(s.length()-i-1)) return false;
        }
        return true;

    }
}
